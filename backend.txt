This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: archive
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
alembic.ini
crud.py
database.py
main.py
migrations/env.py
migrations/README
migrations/script.py.mako
migrations/versions/7dd86d26f326_initial_migration.py
models.py
routes.py
schemas.py
security.py
sqlite_Test.py
test_main.http

================================================================
Files
================================================================

================
File: security.py
================
# security.py
import os
from datetime import datetime, timedelta, timezone
from typing import Optional

from jose import JWTError, jwt
from passlib.context import CryptContext
from dotenv import load_dotenv

load_dotenv() # Завантажуємо змінні з .env

# --- Налаштування ---
JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY")
JWT_ALGORITHM = os.getenv("JWT_ALGORITHM", "HS256")
JWT_ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("JWT_ACCESS_TOKEN_EXPIRE_MINUTES", 30))

if not JWT_SECRET_KEY:
    raise ValueError("Не встановлено JWT_SECRET_KEY в .env файлі")

# --- Хешування паролів ---
# Використовуємо bcrypt
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Перевіряє, чи збігається звичайний пароль з хешованим."""
    return pwd_context.verify(plain_password, hashed_password)

def hash_password(password: str) -> str:
    """Хешує пароль для збереження."""
    return pwd_context.hash(password)

# --- Робота з JWT ---
def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    """Створює новий JWT токен доступу."""
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        # Використовуємо налаштування часу життя з .env
        expire = datetime.now(timezone.utc) + timedelta(minutes=JWT_ACCESS_TOKEN_EXPIRE_MINUTES)

    to_encode.update({"exp": expire})
    # Використовуємо 'sub' (subject) для імені користувача - стандартна практика
    encoded_jwt = jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)
    return encoded_jwt

def verify_token(token: str, credentials_exception) -> Optional[str]:
    """
    Перевіряє JWT токен.
    Повертає ім'я користувача (sub) якщо токен валідний, інакше викликає виняток.
    """
    try:
        # Декодуємо токен
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
        # Отримуємо ім'я користувача з поля 'sub'
        username: str = payload.get("sub")
        if username is None:
            # Якщо 'sub' немає в токені - це помилка
            raise credentials_exception
        # Можна додати перевірку інших полів токена тут, якщо потрібно
        return username
    except JWTError:
        # Якщо сталася помилка декодування або підпис невірний
        raise credentials_exception
    except Exception as e:
        # Інші можливі помилки
        print(f"Помилка верифікації токена: {e}") # Логування для діагностики
        raise credentials_exception

================
File: .gitignore
================
# --- Environment ---
# Ignore environment variables file (contains secrets!)
.env

# Ignore virtual environment directories
venv/
env/
.venv/
.env/

# --- Python ---
# Ignore Python bytecode and cache
__pycache__/
*.py[cod]
*$py.class

# Ignore distribution / packaging
dist/
build/
*.egg-info/
*.egg
wheels/
pip-wheel-metadata/
share/python-wheels/
*.manifest
*.spec

# --- Databases ---
# Ignore SQLite database files (like teleprogram.db)
*.db
*.sqlite
*.sqlite3
# If you use other DBs locally, add their file types (e.g., *.sqlitedb)

# --- IDE / Editor ---
# Ignore JetBrains IDE files (PyCharm, IntelliJ, etc.)
.idea/

# Ignore VS Code settings
.vscode/

# --- Tool Specific (Based on your structure) ---
# Ignore Repomix directory and output (assuming these are generated/local)
.repomix/
repomix-output.txt

# --- Testing ---
# Ignore pytest cache
.pytest_cache/

# Ignore coverage reports
.coverage
.coverage.*
htmlcov/
nosetests.xml
coverage.xml

# --- OS Specific ---
# Ignore macOS finder files
.DS_Store

# Ignore Windows thumbnail cache
Thumbs.db

# --- Logs ---
*.log
logs/
*.log.*

# --- Temporary files ---
*.swp
*~

================
File: alembic.ini
================
# A generic, single database configuration.

[alembic]
# path to migration scripts
# Use forward slashes (/) also on windows to provide an os agnostic path
script_location = migrations

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to migrations/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_path_separator" below.
# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses os.pathsep.
# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
# version_path_separator = newline
#
# Use os.pathsep. Default configuration used for new projects.
version_path_separator = os

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = sqlite:///./teleprogram.db



[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the exec runner, execute a binary
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

================
File: crud.py
================
from sqlalchemy.orm import Session, joinedload 
from models import TVProgram, TVChannel, User
from schemas import TVProgramCreate, TVProgramResponse, TVChannelCreate, TVChannelResponse, UserCreate, UserResponse
from fastapi import HTTPException
# Додаємо імпорт функції хешування
from typing import Optional
from security import hash_password


def create_tv_program(db: Session, program: TVProgramCreate) -> TVProgramResponse:
    # Перевіряємо, чи існує канал з таким channel_id
    channel = db.query(TVChannel).filter(TVChannel.id == program.channel_id).first()
    if not channel:
        raise HTTPException(status_code=404, detail="Канал не знайдений")

    db_program = TVProgram(**program.dict())
    db.add(db_program)
    db.commit()
    db.refresh(db_program)
    return db_program

def get_tv_program(db: Session, program_id: int) -> TVProgramResponse:
    program = db.query(TVProgram).filter(TVProgram.id == program_id).first()
    if not program:
        raise HTTPException(status_code=404, detail="Програма не знайдена")
    return program

def get_all_tv_programs(db: Session):
    return db.query(TVProgram).all()


def update_tv_program(db: Session, program_id: int, updated_program: TVProgramCreate) -> TVProgramResponse:
    program = db.query(TVProgram).filter(TVProgram.id == program_id).first()
    if not program:
        raise HTTPException(status_code=404, detail="Програма не знайдена")

    for key, value in updated_program.dict().items():
        setattr(program, key, value)  # Оновлюємо кожне поле

    db.commit()
    db.refresh(program)
    return program


def delete_tv_program(db: Session, program_id: int):
    program = db.query(TVProgram).filter(TVProgram.id == program_id).first()
    if not program:
        raise HTTPException(status_code=404, detail="Програма не знайдена")

    db.delete(program)
    db.commit()
    return {"message": "Програма видалена"}

def get_all_channels(db: Session):
    """Fetches all TV Channels without their programs."""
    return db.query(TVChannel).all()

def get_channel_with_programs(db: Session, channel_id: int):
    """Fetches a single TV Channel by ID, including its associated programs."""
    # Use joinedload to efficiently load programs in the same query
    channel = db.query(TVChannel).options(
        joinedload(TVChannel.programs)
    ).filter(TVChannel.id == channel_id).first()

    if not channel:
        raise HTTPException(status_code=404, detail="Канал не знайдений")
    return channel


# --- NEW User CRUD functions ---

def get_user_by_username(db: Session, username: str) -> Optional[User]:
    """Отримує користувача з БД за ім'ям."""
    return db.query(User).filter(User.username == username).first()

def create_user(db: Session, user: UserCreate) -> User:
    """Створює нового користувача в БД."""
    # Хешуємо пароль перед збереженням
    hashed_password = hash_password(user.password)
    # Створюємо об'єкт моделі User, не передаючи оригінальний пароль
    db_user = User(
        username=user.username,
        password_hash=hashed_password,
        role=user.role or 'user' # Встановлюємо роль (або 'user' за замовчуванням)
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

================
File: database.py
================
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "sqlite:///./teleprogram.db"


engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

================
File: main.py
================
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware # Import CORS
# from sqlalchemy import text
# Імпортуємо роутери з routes
from routes import auth_router, app_router # Замість import routes
from database import SessionLocal, Base # Base може знадобитися для створення таблиць, якщо не через Alembic
from models import TVChannel # Потрібен для init_db


app = FastAPI()

# --- Add CORS Middleware ---
origins = [
    "http://localhost:5173", # Default Vite port
    "http://localhost:3000", # Default CRA port
    # Add your deployed frontend URL here if applicable
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins, # Allows specific origins
    allow_credentials=True,
    allow_methods=["*"], # Allows all methods (GET, POST, PUT, DELETE, etc.)
    allow_headers=["*"], # Allows all headers (including Authorization)
)

def init_db():
    db = SessionLocal()
    # db.execute(text('PRAGMA foreign_keys=ON'))

    if db.query(TVChannel).count() == 0:  # Якщо база пуста
        channels = [
            TVChannel(name="Discovery", country="USA"),
            TVChannel(name="National Geographic", country="USA"),
            TVChannel(name="BBC News", country="UK"),
            TVChannel(name="CNN", country="USA")
        ]
        db.add_all(channels)
        db.commit()
    db.close()

@app.on_event("startup")  # Викликаємо init_db() при старті сервера
def startup():
    init_db()

# --- Включаємо роутери ---
app.include_router(auth_router) # Додаємо роутер автентифікації
app.include_router(app_router)  # Додаємо основний роутер програми

@app.get("/")
def root():
    return {"message": "API телепрограми працює!"}

================
File: migrations/env.py
================
from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
from models import Base  # Імпортуємо моделі
target_metadata = Base.metadata


# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

================
File: migrations/README
================
Generic single-database configuration.

================
File: migrations/script.py.mako
================
"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision: str = ${repr(up_revision)}
down_revision: Union[str, None] = ${repr(down_revision)}
branch_labels: Union[str, Sequence[str], None] = ${repr(branch_labels)}
depends_on: Union[str, Sequence[str], None] = ${repr(depends_on)}


def upgrade() -> None:
    ${upgrades if upgrades else "pass"}


def downgrade() -> None:
    ${downgrades if downgrades else "pass"}

================
File: migrations/versions/7dd86d26f326_initial_migration.py
================
"""Initial migration

Revision ID: 7dd86d26f326
Revises: 
Create Date: 2025-03-03 14:53:40.059872

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7dd86d26f326'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('channels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_channels_id'), 'channels', ['id'], unique=False)
    op.create_index(op.f('ix_channels_name'), 'channels', ['name'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('password_hash', sa.String(), nullable=True),
    sa.Column('role', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('programs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('channel_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['channel_id'], ['channels.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_programs_id'), 'programs', ['id'], unique=False)
    op.create_index(op.f('ix_programs_title'), 'programs', ['title'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_programs_title'), table_name='programs')
    op.drop_index(op.f('ix_programs_id'), table_name='programs')
    op.drop_table('programs')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_channels_name'), table_name='channels')
    op.drop_index(op.f('ix_channels_id'), table_name='channels')
    op.drop_table('channels')
    # ### end Alembic commands ###

================
File: models.py
================
from sqlalchemy import Column, Integer, String, ForeignKey, DateTime
from sqlalchemy.orm import relationship
from database import Base

class TVChannel(Base):
    __tablename__ = "channels"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, index=True)
    country = Column(String)

    # Відношення один-до-багатьох (TVChannel → TVProgram)
    programs = relationship("TVProgram", back_populates="channel")

class TVProgram(Base):
    __tablename__ = "programs"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(String)
    start_time = Column(DateTime)
    end_time = Column(DateTime)
    channel_id = Column(Integer, ForeignKey("channels.id"))

    # Відношення багато-до-одного (TVProgram → TVChannel)
    channel = relationship("TVChannel", back_populates="programs")

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    password_hash = Column(String) # <--- Переконайтесь, що це поле є
    role = Column(String, default='user') # 'admin' або 'user', додамо default='user'

================
File: routes.py
================
from fastapi import APIRouter, Depends, HTTPException, status # Додаємо status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm # Додаємо інструменти OAuth2
from sqlalchemy.orm import Session
from database import SessionLocal
import crud
import schemas

import security # Наш файл з функціями безпеки
from models import User # Імпортуємо модель User
from typing import List # Import List

# load_dotenv()  # Завантажуємо змінні середовища
# --- Налаштування OAuth2 ---
# Вказуємо URL ендпоінту, який буде видавати токени
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/token")


# ADMIN_API_KEY = os.getenv("ADMIN_API_KEY", "defaultkey")  # Беремо ключ із .env
# api_key_header = APIKeyHeader(name="Authorization", auto_error=True)
# #
# def get_admin_user(api_key: str = Depends(api_key_header)):
#     if api_key != ADMIN_API_KEY:
#         raise HTTPException(status_code=403, detail="Недостатньо прав")
#     return {"role": "admin"}

# routes.py (продовження)



def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --- Залежність для отримання поточного користувача ---
async def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)) -> User:
    """
    Перевіряє токен і повертає поточного користувача з БД.
    Викликає виняток, якщо токен недійсний або користувач не знайдений.
    """
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    # Перевіряємо токен і отримуємо username
    username = security.verify_token(token, credentials_exception)
    if username is None: # Додаткова перевірка (хоча verify_token вже має викликати виняток)
         raise credentials_exception
    # Отримуємо користувача з БД
    user = crud.get_user_by_username(db, username=username)
    if user is None:
        # Якщо користувача з таким ім'ям немає в БД (напр., видалили після видачі токена)
        raise credentials_exception
    return user # Повертаємо об'єкт моделі User


# routes.py (продовження)

async def get_current_active_admin_user(current_user: User = Depends(get_current_user)) -> User:
    """
    Перевіряє, чи поточний користувач є адміністратором.
    Використовується для захисту адміністративних ендпоінтів.
    """
    if current_user.role != 'admin':
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Operation not permitted. Admin privileges required."
        )
    # Можна додати перевірку активності користувача тут, якщо б у моделі було поле is_active
    # if not current_user.is_active:
    #     raise HTTPException(status_code=400, detail="Inactive user")
    return current_user


# --- Роутер для автентифікації ---
auth_router = APIRouter(
    prefix="/auth", # Префікс для всіх маршрутів у цьому роутері
    tags=["Authentication"] # Тег для групування в документації Swagger
)

@auth_router.post("/register", response_model=schemas.UserResponse, status_code=status.HTTP_201_CREATED)
async def register_user(user_in: schemas.UserCreate, db: Session = Depends(get_db)):
    """
    Реєструє нового користувача.
    За замовчуванням створюється з роллю 'user'.
    """
    # Перевірка, чи користувач вже існує
    db_user = crud.get_user_by_username(db, username=user_in.username)
    if db_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Username already registered"
        )
    # Створюємо користувача
    created_user = crud.create_user(db=db, user=user_in)
    return created_user # Повертаємо дані створеного користувача (без пароля)

@auth_router.post("/token", response_model=schemas.Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    """
    Автентифікує користувача та повертає JWT токен доступу.
    Використовує стандартний `OAuth2PasswordRequestForm` для отримання username/password.
    """
    user = crud.get_user_by_username(db, username=form_data.username)
    # Перевіряємо, чи існує користувач і чи правильний пароль
    if not user or not security.verify_password(form_data.password, user.password_hash):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    # Створюємо токен доступу
    access_token = security.create_access_token(
        data={"sub": user.username} # 'sub' - стандартне поле для ідентифікатора користувача в JWT
    )
    # Повертаємо токен
    return {"access_token": access_token, "token_type": "bearer"}

# --- Основний роутер програми (перейменовуємо для ясності) ---
app_router = APIRouter() # Замість router = APIRouter() на початку


# @router.post("/programs/", response_model=schemas.TVProgramResponse)
# def create_program(
#     program: schemas.TVProgramCreate,
#     db: Session = Depends(get_db),
#     user: dict = Depends(get_admin_user)  # Доступ тільки для адміна
# ):
#     return crud.create_tv_program(db, program)

# @router.put("/programs/{program_id}", response_model=schemas.TVProgramResponse)
# def update_program(
#     program_id: int,
#     updated_program: schemas.TVProgramCreate,
#     db: Session = Depends(get_db),
#     user: dict = Depends(get_admin_user)
# ):
#     return crud.update_tv_program(db, program_id, updated_program)

# @router.delete("/programs/{program_id}")
# def delete_program(
#     program_id: int,
#     db: Session = Depends(get_db),
#     user: dict = Depends(get_admin_user)
# ):
#     return crud.delete_tv_program(db, program_id)


@app_router.post("/programs/", response_model=schemas.TVProgramResponse, status_code=status.HTTP_201_CREATED)
def create_program(
    program: schemas.TVProgramCreate,
    db: Session = Depends(get_db),
    # Замінюємо залежність: тепер потрібен активний адмін
    current_admin: User = Depends(get_current_active_admin_user)
):
    # current_admin більше не використовується явно, але залежність виконує перевірку
    return crud.create_tv_program(db, program)

@app_router.put("/programs/{program_id}", response_model=schemas.TVProgramResponse)
def update_program(
    program_id: int,
    updated_program: schemas.TVProgramCreate,
    db: Session = Depends(get_db),
    # Замінюємо залежність
    current_admin: User = Depends(get_current_active_admin_user)
):
    return crud.update_tv_program(db, program_id, updated_program)

@app_router.delete("/programs/{program_id}", status_code=status.HTTP_204_NO_CONTENT) # Краще повертати 204 для DELETE
def delete_program(
    program_id: int,
    db: Session = Depends(get_db),
    # Замінюємо залежність
    current_admin: User = Depends(get_current_active_admin_user)
):
     result = crud.delete_tv_program(db, program_id)
     # crud.delete_tv_program зараз повертає {"message": ...} або викликає 404
     # Для статусу 204 відповідь має бути порожньою
     # Можна змінити crud.delete_tv_program, щоб вона нічого не повертала у разі успіху
     # Або просто не повертати результат тут:
     return None # Повертаємо None для відповіді 204 No Content


# --- Публічні ендпоінти (залишаються без змін) ---

@app_router.get("/programs/", response_model=list[schemas.TVProgramResponse])
def get_all_programs(db: Session = Depends(get_db)):
    return crud.get_all_tv_programs(db)
@app_router.get("/programs/{program_id}", response_model=schemas.TVProgramResponse)
def get_program(program_id: int, db: Session = Depends(get_db)):
    return crud.get_tv_program(db, program_id)

# Use the new basic response schema here
@app_router.get("/channels/", response_model=List[schemas.TVChannelBasicResponse]) # <--- CHANGE HERE
def read_channels(db: Session = Depends(get_db)):
    """
    Get a list of all TV channels (basic info only).
    """
    channels = crud.get_all_channels(db)
    return channels # Pydantic will now use TVChannelBasicResponse

# Keep using the full response schema here
@app_router.get("/channels/{channel_id}", response_model=schemas.TVChannelResponse) # <--- NO CHANGE HERE
def read_channel_with_programs(channel_id: int, db: Session = Depends(get_db)):
    """
    Get a specific TV channel by its ID, including all its associated programs.
    """
    channel = crud.get_channel_with_programs(db, channel_id=channel_id)
    return channel




# Додамо ендпоінт для перевірки поточного користувача (корисно для фронтенду)
@app_router.get("/users/me", response_model=schemas.UserResponse)
async def read_users_me(current_user: User = Depends(get_current_user)):
    """
    Повертає дані поточного автентифікованого користувача.
    """
    return current_user

================
File: schemas.py
================
from pydantic import BaseModel, Field # Додаємо Field для пароля
from datetime import datetime
from typing import Optional, List # Import List

class TVProgramBase(BaseModel):
    title: str
    description: str
    start_time: datetime
    end_time: datetime
    channel_id: int

class TVProgramCreate(TVProgramBase):
    pass  # Використовується при створенні (POST-запит)

class TVProgramResponse(TVProgramBase):
    id: int  # Додаємо поле, яке приходить із бази

    class Config:
        orm_mode = True  # Дозволяє працювати з SQLAlchemy-моделями

class TVChannelBase(BaseModel):
    name: str
    country: str

class TVChannelCreate(TVChannelBase):
    pass

# --- NEW: Schema for listing channels WITHOUT programs ---
class TVChannelBasicResponse(TVChannelBase):
    id: int

    class Config:
        orm_mode = True

class TVChannelResponse(TVChannelBase):
    id: int
    programs: List[TVProgramResponse] = [] # Add this line

    class Config:
        orm_mode = True # Changed from from_attributes = True


# --- User Schemas ---
class UserBase(BaseModel):
    username: str
    role: str = 'user' # Роль за замовчуванням

class UserCreate(UserBase):
    # Використовуємо Field для додаткових обмежень, якщо потрібно
    password: str = Field(..., min_length=8) # Пароль передається тільки при створенні, мінімум 8 символів

class UserResponse(UserBase): # Схема для повернення даних користувача (БЕЗ пароля)
    id: int

    class Config:
        orm_mode = True # Залишаємо для сумісності з SQLAlchemy

# --- Token Schemas ---
class Token(BaseModel):
    access_token: str
    token_type: str # Зазвичай 'bearer'

class TokenData(BaseModel):
    # Схема для даних, що зберігаються всередині JWT токена
    username: Optional[str] = None

================
File: sqlite_Test.py
================
import sqlite3

conn = sqlite3.connect("teleprogram.db")
cursor = conn.cursor()

cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")  # SELECT * FROM channels

tables = cursor.fetchall()

print("Таблиці у базі:", tables)

conn.close()

================
File: test_main.http
================
# Test your FastAPI endpoints

GET http://127.0.0.1:8000/
Accept: application/json

###

GET http://127.0.0.1:8000/hello/User
Accept: application/json

###



================================================================
End of Codebase
================================================================
